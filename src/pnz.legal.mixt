namespace pnz.legal

meta {
}

import [
	"html.mixt"
]

{
	// pnz.legal::document creates a PNZ legal document as HTML
	pnz.legal::document = (content as list) => (
		html::document(
			"html",
			"en",
			[
					;meta = html::meta( "UTF-8" )
					title = "HVCS SCP"
					link = html::stylesheet( "https://fonts.googleapis.com/css2?family=Open+Sans&display=swap" )
					link = html::stylesheet( "../styles/pnz.legal.css" )
					link = html::stylesheet( "../styles/pnz.hvcs.menu.css" )
			]		
			html::class(
				"document"
				content
			)
		)
	)

	// pnz.legal::document_title creates a document title
	pnz.legal::document_title = (title as text, version as text, effectiveDate as text ) => [
		div = html::class(
			"document-title"
			title
		)
		div = html::class(
			"document-meta"
			$"Version $(version)"
		)
		div = html::class(
			"document-meta"
			$"Effective date: $(effectiveDate)"
		)
	]

	// pnz.legal::section_heading creates a section heading
	pnz.legal::section_heading = (content as any) => #( h1 =
		html::class( "section-heading", content )
	)

	// pnz.legal::subsection_heading creates a sub-section heading
	pnz.legal::subsection_heading = (content as any) => #( h2 = 
		html::class( "subsection-heading", content )
	)

	// pnz.legal::tag_standards creates standards tag
	pnz.legal::tag_standards = #( div = 
		html::class( "tag-standards", "" )
	)

	// pnz.legal::tag_bestpractice creates bestpractice tag
	pnz.legal::tag_bestpractice = #( div = 
		html::class( "tag-bestpractice", "" )
	)

	// pnz.legal::tag_commentary creates commentary tag
	pnz.legal::tag_commentary = #( div = 
		html::class( "tag-commentary", "" )
	)

	// pnz.legal::clause creates a clause with a header in the left column
	// clauses numbered with the style (1) (2)
	pnz.legal::clause = (id as text, heading as text, ...content as any) => #( div = 
		html::class(
			"clause-row",
			[
				div = {
					html::attributes = {
						class = "clause-heading"
						data-number = id
					}
				} @> heading
				ol = html::class( "level1", content )
			]
		)
	)

	// pnz.legal::level2 creates indented clauses numbered with the style (a) (b)
	pnz.legal::level2 = (...content as any) => #( ol = 
		html::class( "level2", content )
	)

	// pnz.legal::level3 creates indented clauses numbered with the style (i) (ii)
	pnz.legal::level3 = (...content as any) => #( ol = 
		html::class( "level3", content )
	)

	pnz.legal::table = (content as table) => #( table = 
		html::class( "pnz-table", content )
	)

	pnz.legal::br = #( br = null )

	pnz.legal::nonumber = (...content as any) => #( div = content )

	// pnz.legal::rowspan adds a rowspan attribute to table data
	pnz.legal::rowspan = (rowCount as UInt64.Type) => {
		html::attributes = {
			rowspan = rowCount
		}
	}

	// pnz.legal::colspan adds a colspan attribute to table data
	pnz.legal::colspan = (colCount as UInt64.Type) => {
		html::attributes = {
			colspan = colCount
		}
	}

	// pnz.legal::rowcolspan adds a rowspan and colspan attribute to table data
	pnz.legal::rowcolspan = (rowCount as UInt64.Type, colCount as UInt64.Type) => {
		html::attributes = {
			rowspan = rowCount
			colspan = colCount
		}
	}

	// pnz.legal::image inserts an image with alternate text
	pnz.legal::image = (src as text, alt as text) => #( div =
		html::class(
			"diagram"
			{
				img = {
					html::attributes = {
						src = src
						alt = alt
					}
				} @> ""
			}
		)
	)

	// pnz.legal::image inserts an image with alternate text
	pnz.legal::logo = #( div =
		html::class(
			"logo"
			{
				img = {
					html::attributes = {
						src = "../images/PNZ_OnWhite_rgb.gif"
						alt = "PNZ Logo"
					}
				} @> ""
			}
		)
	)

	// pnz.legal::bullets sets the style of content to a bulleted list
	pnz.legal::bullets = (...content as any) => #( ul = 
		html::class( "bullets", content )
	)

	// pnz.legal::list configures the content as a list
	pnz.legal::list = (...content as any) => #( ul = content )

	// pnz.legal::paragraph configures the content as a paragraph
	pnz.legal::paragraph = (...content as any) => #( p = content )

	// pnz.legal::italic configures the content as a itelic text
	pnz.legal::italic = (content as text) => #( span =
		html::class( "italic", content )
	)
}